// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Index() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = head().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"container\"><div class=\"header\"><h1>Hello, World</h1><button onclick=\"handleLogout()\" class=\"logout-button\">Logout</button></div><div class=\"actions\" data-signals=\"{prompt: &#39;Write a short story about a cat using lots of markdown formatting.&#39;}\"><button hx-get=\"/templates/v1/hello\" hx-target=\"#content\">Click me</button> <button hx-get=\"/templates/v1/login\">Login</button> <button data-on-click=\"@get(&#39;/templates/v1/text-stream&#39;)\" class=\"stream-button\">Try Streaming Demo</button> <input data-bind-prompt></div><div id=\"content\"></div><style>\n            .container {\n                padding: 20px;\n            }\n            .header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 20px;\n            }\n            .actions {\n                margin-bottom: 20px;\n            }\n            .actions button {\n                margin-right: 10px;\n            }\n            .logout-button {\n                padding: 8px 16px;\n                background-color: #ff4444;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n            }\n            .logout-button:hover {\n                background-color: #cc0000;\n            }\n            .stream-button {\n                padding: 8px 16px;\n                background-color: #4CAF50;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background-color 0.3s ease;\n            }\n            .stream-button:hover {\n                background-color: #45a049;\n            }\n            .stream-button[data-loading] {\n                background-color: #cccccc;\n                cursor: wait;\n            }\n        </style></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = firebaseAuthSetup().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Login() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var3 = []any{loginContainer()}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var3...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var3).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/web/templates/index.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 = []any{loginForm()}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var5...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var5).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/web/templates/index.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\"><h1 style=\"text-align: center; color: #333; margin-bottom: 20px;\">Sign In</h1>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 = []any{googleButton()}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var7...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<button class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var7).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/web/templates/index.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\" onclick=\"handleGoogleSignIn()\"><img src=\"https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg\" style=\"margin-right: 10px; width: 18px; height: 18px;\"> Sign in with Google</button></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func head() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var9 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var9 == nil {
			templ_7745c5c3_Var9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<head><script type=\"module\" src=\"https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.1/bundles/datastar.js\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = markdownScript().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</head>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func firebaseAuthSetup() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var10 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var10 == nil {
			templ_7745c5c3_Var10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<script type=\"module\">\n        // Import the functions you need from the SDKs you need\n        import { initializeApp } from \"https://www.gstatic.com/firebasejs/11.1.0/firebase-app.js\";\n        import { getAnalytics } from \"https://www.gstatic.com/firebasejs/11.1.0/firebase-analytics.js\";\n        import { getAuth, onAuthStateChanged , GoogleAuthProvider, signInWithPopup, signOut} from \"https://www.gstatic.com/firebasejs/11.1.0/firebase-auth.js\";\n\n        // Your web app's Firebase configuration\n        const firebaseConfig = {\n            apiKey: \"AIzaSyAoYFV3Br2ryvGVXHJDRzEiixosd2VunU8\",\n            authDomain: \"ditto-app-dev.firebaseapp.com\",\n            projectId: \"ditto-app-dev\",\n            storageBucket: \"ditto-app-dev.appspot.com\",\n            messagingSenderId: \"22790208601\",\n            appId: \"1:22790208601:web:b6ee532b2e8a048d1a0548\",\n            measurementId: \"G-KJFMK6PHML\"\n        };\n\n        // Initialize Firebase\n        const app = initializeApp(firebaseConfig);\n        const analytics = getAnalytics(app);\n\n        // Initialize Auth and set up listeners\n        const auth = getAuth();\n        console.log('Firebase Auth initialized');\n            \n        // Listen for auth state changes\n        onAuthStateChanged(auth, (user) => {\n            if (user) {\n                // User is signed in\n                console.log('User signed in:', user.email);\n                user.getIdToken().then((token) => {\n                    console.log('Firebase token obtained and stored in localStorage');\n                    localStorage.setItem('firebase-token', token);\n                });\n            } else {\n                // User is signed out\n                console.log('User signed out, removing token from localStorage');\n                localStorage.removeItem('firebase-token');\n            }\n        });\n\n        window.handleGoogleSignIn = async () => {\n            const auth = getAuth();\n            const provider = new GoogleAuthProvider();\n            \n            try {\n                const result = await signInWithPopup(auth, provider);\n                const user = result.user;\n                console.log('User signed in:', user.email);\n                \n                // After successful sign in, redirect to home\n                window.location.href = '/';\n            } catch (error) {\n                console.error('Error signing in with Google:', error.message);\n                alert('Error signing in with Google. Please try again.');\n            }\n        };\n        window.handleLogout = async () => {\n            const auth = getAuth();\n            await signOut(auth);\n            window.location.href = '/';\n        };\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func loginContainer() templ.CSSClass {
	templ_7745c5c3_CSSBuilder := templruntime.GetBuilder()
	templ_7745c5c3_CSSBuilder.WriteString(`display:flex;`)
	templ_7745c5c3_CSSBuilder.WriteString(`justify-content:center;`)
	templ_7745c5c3_CSSBuilder.WriteString(`align-items:center;`)
	templ_7745c5c3_CSSBuilder.WriteString(`min-height:100vh;`)
	templ_7745c5c3_CSSBuilder.WriteString(`background-color:#23272a;`)
	templ_7745c5c3_CSSID := templ.CSSID(`loginContainer`, templ_7745c5c3_CSSBuilder.String())
	return templ.ComponentCSSClass{
		ID:    templ_7745c5c3_CSSID,
		Class: templ.SafeCSS(`.` + templ_7745c5c3_CSSID + `{` + templ_7745c5c3_CSSBuilder.String() + `}`),
	}
}

func loginForm() templ.CSSClass {
	templ_7745c5c3_CSSBuilder := templruntime.GetBuilder()
	templ_7745c5c3_CSSBuilder.WriteString(`background-color:#ffffffb0;`)
	templ_7745c5c3_CSSBuilder.WriteString(`box-shadow:0px 4px 12px rgba(0, 0, 0, 0.1);`)
	templ_7745c5c3_CSSBuilder.WriteString(`border-radius:8px;`)
	templ_7745c5c3_CSSBuilder.WriteString(`padding:40px 20px;`)
	templ_7745c5c3_CSSBuilder.WriteString(`width:100%;`)
	templ_7745c5c3_CSSBuilder.WriteString(`max-width:400px;`)
	templ_7745c5c3_CSSBuilder.WriteString(`box-sizing:border-box;`)
	templ_7745c5c3_CSSID := templ.CSSID(`loginForm`, templ_7745c5c3_CSSBuilder.String())
	return templ.ComponentCSSClass{
		ID:    templ_7745c5c3_CSSID,
		Class: templ.SafeCSS(`.` + templ_7745c5c3_CSSID + `{` + templ_7745c5c3_CSSBuilder.String() + `}`),
	}
}

func googleButton() templ.CSSClass {
	templ_7745c5c3_CSSBuilder := templruntime.GetBuilder()
	templ_7745c5c3_CSSBuilder.WriteString(`width:100%;`)
	templ_7745c5c3_CSSBuilder.WriteString(`padding:12px 15px;`)
	templ_7745c5c3_CSSBuilder.WriteString(`background-color:#ffffff;`)
	templ_7745c5c3_CSSBuilder.WriteString(`color:#333;`)
	templ_7745c5c3_CSSBuilder.WriteString(`border:1px solid #ddd;`)
	templ_7745c5c3_CSSBuilder.WriteString(`border-radius:4px;`)
	templ_7745c5c3_CSSBuilder.WriteString(`font-size:16px;`)
	templ_7745c5c3_CSSBuilder.WriteString(`font-weight:bold;`)
	templ_7745c5c3_CSSBuilder.WriteString(`cursor:pointer;`)
	templ_7745c5c3_CSSBuilder.WriteString(`transition:background-color 0.3s ease;`)
	templ_7745c5c3_CSSBuilder.WriteString(`margin-top:10px;`)
	templ_7745c5c3_CSSBuilder.WriteString(`display:flex;`)
	templ_7745c5c3_CSSBuilder.WriteString(`align-items:center;`)
	templ_7745c5c3_CSSBuilder.WriteString(`justify-content:center;`)
	templ_7745c5c3_CSSBuilder.WriteString(`text-decoration:none;`)
	templ_7745c5c3_CSSID := templ.CSSID(`googleButton`, templ_7745c5c3_CSSBuilder.String())
	return templ.ComponentCSSClass{
		ID:    templ_7745c5c3_CSSID,
		Class: templ.SafeCSS(`.` + templ_7745c5c3_CSSID + `{` + templ_7745c5c3_CSSBuilder.String() + `}`),
	}
}

func markdownScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var11 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var11 == nil {
			templ_7745c5c3_Var11 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<script type=\"module\">\n\t\t\t// Import the marked library for markdown parsing\n\t\t\timport { marked } from 'https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js';\n\n\t\t\t// Define the markdown renderer web component\n\t\t\tclass MarkdownRenderer extends HTMLElement {\n\t\t\t\tstatic get observedAttributes() {\n\t\t\t\t\treturn [\"content\"];\n\t\t\t\t}\n\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper();\n\t\t\t\t\tconsole.log('MarkdownRenderer: Initializing component');\n\t\t\t\t\tthis.attachShadow({ mode: 'open' });\n\t\t\t\t\tthis.shadowRoot.innerHTML = `\n\t\t\t\t\t\t<style>\n\t\t\t\t\t\t\t:host {\n\t\t\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\t\t\tfont-family: system-ui, -apple-system, sans-serif;\n\t\t\t\t\t\t\t\tline-height: 1.6;\n\t\t\t\t\t\t\t\tcolor: #333;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t.markdown-content {\n\t\t\t\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/* Markdown Styles */\n\t\t\t\t\t\t\th1, h2, h3, h4, h5, h6 {\n\t\t\t\t\t\t\t\tmargin-top: 1.5em;\n\t\t\t\t\t\t\t\tmargin-bottom: 0.5em;\n\t\t\t\t\t\t\t\tline-height: 1.2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\th1 { font-size: 2em; }\n\t\t\t\t\t\t\th2 { font-size: 1.5em; }\n\t\t\t\t\t\t\th3 { font-size: 1.25em; }\n\t\t\t\t\t\t\tp { margin: 1em 0; }\n\t\t\t\t\t\t\tcode {\n\t\t\t\t\t\t\t\tbackground: #f4f4f4;\n\t\t\t\t\t\t\t\tpadding: 0.2em 0.4em;\n\t\t\t\t\t\t\t\tborder-radius: 3px;\n\t\t\t\t\t\t\t\tfont-family: monospace;\n\t\t\t\t\t\t\t\tfont-size: 0.9em;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpre code {\n\t\t\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\t\t\tpadding: 1em;\n\t\t\t\t\t\t\t\toverflow-x: auto;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tblockquote {\n\t\t\t\t\t\t\t\tborder-left: 4px solid #ddd;\n\t\t\t\t\t\t\t\tmargin: 0;\n\t\t\t\t\t\t\t\tpadding-left: 1em;\n\t\t\t\t\t\t\t\tcolor: #666;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tul, ol {\n\t\t\t\t\t\t\t\tpadding-left: 2em;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\timg {\n\t\t\t\t\t\t\t\tmax-width: 100%;\n\t\t\t\t\t\t\t\theight: auto;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ta {\n\t\t\t\t\t\t\t\tcolor: #0366d6;\n\t\t\t\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ta:hover {\n\t\t\t\t\t\t\t\ttext-decoration: underline;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttable {\n\t\t\t\t\t\t\t\tborder-collapse: collapse;\n\t\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t\t\tmargin: 1em 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth, td {\n\t\t\t\t\t\t\t\tborder: 1px solid #ddd;\n\t\t\t\t\t\t\t\tpadding: 0.5em;\n\t\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tth {\n\t\t\t\t\t\t\t\tbackground: #f8f8f8;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstrong {\n\t\t\t\t\t\t\t\tfont-weight: 600;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</style>\n\t\t\t\t\t\t<div class=\"markdown-content\"></div>\n\t\t\t\t\t`;\n\t\t\t\t\tthis.content = this.shadowRoot.querySelector('.markdown-content');\n\t\t\t\t\tthis._currentContent = '';\n\t\t\t\t\t\n\t\t\t\t\t// Configure marked options\n\t\t\t\t\tmarked.setOptions({\n\t\t\t\t\t\tgfm: true,\n\t\t\t\t\t\tbreaks: true,\n\t\t\t\t\t\tmangle: false,\n\t\t\t\t\t\theaderIds: false\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tattributeChangedCallback(name, oldValue, newValue) {\n\t\t\t\t\tconsole.log('MarkdownRenderer: Attribute changed', {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\toldValue: oldValue?.slice(0, 50) + (oldValue?.length > 50 ? '...' : ''),\n\t\t\t\t\t\tnewValue: newValue?.slice(0, 50) + (newValue?.length > 50 ? '...' : ''),\n\t\t\t\t\t\tcurrentContentLength: this._currentContent.length\n\t\t\t\t\t});\n\n\t\t\t\t\tif (name === 'content' && newValue !== oldValue) {\n\t\t\t\t\t\tconst newContent = newValue || '';\n\t\t\t\t\t\tconsole.log('MarkdownRenderer: Full re-render', {\n\t\t\t\t\t\t\tnewContentLength: newContent.length,\n\t\t\t\t\t\t\tpreview: newContent.slice(0, 50) + (newContent.length > 50 ? '...' : '')\n\t\t\t\t\t\t});\n                        this._currentContent = this._currentContent + newContent;\n\t\t\t\t\t\tthis.render(this._currentContent);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trender(markdown) {\n\t\t\t\t\tif (markdown) {\n\t\t\t\t\t\tconsole.log('MarkdownRenderer: Rendering content');\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst html = marked.parse(markdown);\n\t\t\t\t\t\t\tthis.content.innerHTML = html;\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tconsole.error('MarkdownRenderer: Error parsing markdown:', error);\n\t\t\t\t\t\t\tthis.content.innerHTML = `<div class=\"error\">Error rendering markdown: ${error.message}</div>`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Register the web component\n\t\t\tconsole.log('Registering markdown-renderer component');\n\t\t\tcustomElements.define('markdown-renderer', MarkdownRenderer);\n\t\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
